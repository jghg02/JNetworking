{"primaryContentSections":[{"kind":"content","content":[{"anchor":"How-to-use","level":2,"type":"heading","text":"How to use"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to use this library in your application. The first thing to do is to add this package as a dependency in your project."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this you need to go to "},{"type":"strong","inlineContent":[{"type":"text","text":"File"}]},{"type":"text","text":" > "},{"type":"strong","inlineContent":[{"type":"text","text":"Add Packages"}]},{"type":"text","text":" and then enter the repository url. You can also navigate to your targetâ€™s General pane, and in the "},{"type":"strong","inlineContent":[{"type":"text","text":"Frameworks, Libraries, and Embedded Content"}]},{"type":"text","text":" section, click the "},{"type":"strong","inlineContent":[{"type":"text","text":"+"}]},{"type":"text","text":" button, select Add Other, and choose Add Package Dependency."}]},{"anchor":"URL","level":4,"type":"heading","text":"URL"},{"type":"codeListing","syntax":null,"code":["https:\/\/github.com\/jghg02\/JNetWorking"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you must define the constants associated with the url and the paths that you will need to make the request. for this we create a structure like this"}]},{"type":"codeListing","syntax":"swift","code":["struct ServicesConstants {","    static let baseURL = \"https:\/\/base-url\"","    static let path1 = \"\/path-1\"","    static let path2 = \"\/path-2\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then it is important to define the operations we want to do when connecting to that API. For this we can create a class that extends "},{"type":"reference","isActive":true,"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/APIProtocol"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ This enum will hold all API's actions we want to perform ","enum APIName {","    case getAllCharacters","}","","\/\/\/ If you need to add parameters to your requests you can define them here ","struct APIQueryParams {","    var characterId: Int? = 0","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We then define an extension to implement "},{"type":"reference","isActive":true,"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/APIProtocol"}]},{"type":"codeListing","syntax":"swift","code":["extension APIName: APIProtocol {","    func httpMthodType() -> HTTPMethodType {","        var methodType = HTTPMethodType.get","        switch self {","        case .getAllCharacters","            methodType = .get","        }","        return methodType","    }","","    func apiEndPath() -> String {","        var path = \"\"","        switch self {","        case .getAllCharacters:","            path += ServicesConstants.path-1","        }","        return path","    }","","    func apiBasePath() -> String {","        switch self {","        case .getAllCharacters:","            return ServicesConstants.baseURL","        }","    }","","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally we define our class where the logic will be to make the request and get the information we need."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It would be something like this"}]},{"type":"codeListing","syntax":"swift","code":["","typealias GetAllCharactersResponse = (Result<Model, Error>) -> Void","","protocol APIServicesRequestType {","@discardableResult func getAllCharacters(apiQueryModel: APIQueryParams, completion: @escaping GetAllCharactersResponse) -> URLSessionDataTask?","}","","struct ServicesRequest: APIServicesRequestType {","","func getAllCharacters(apiQueryModel: APIQueryParams, completion: @escaping GetAllCharactersResponse) -> URLSessionDataTask? {","    let requestModel = APIRequestModel(api: APIName.getAllCharacters)","    return JNWebserviceHelper.requestAPI(apiModel: requestModel) { response in","        switch response {","        case .success(let data):","            JNJSONResponseDecoder.decodeFrom(data, returningModelType: Model.self, completion: { (allData, error) in","                if let parserError = error {","                    completion(.failure(parserError))","                    return","                }","","                if let data = allData {","                    completion(.success(data))","                }","            })","        case .failure(let error):","            completion(.failure(error))","            }","        }","    }","","}",""]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/jnetworking"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/JNetworking\/documentation\/JNetworking","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This library provee all the necessary logic to make a request to any API from your application."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"JNetworking","title":"JNetworking","symbolKind":"module","role":"collection","modules":[{"name":"JNetworking"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/JNetworking\/documentation\/JNetworking\/JNJSONResponseDecoder"]},{"title":"Protocols","identifiers":["doc:\/\/JNetworking\/documentation\/JNetworking\/APIModelType","doc:\/\/JNetworking\/documentation\/JNetworking\/APIProtocol"]},{"title":"Structures","identifiers":["doc:\/\/JNetworking\/documentation\/JNetworking\/APIRequestModel","doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebserviceConfig","doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebserviceHelper"]},{"title":"Type Aliases","identifiers":["doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebServiceCompletionBlock"]},{"title":"Enumerations","identifiers":["doc:\/\/JNetworking\/documentation\/JNetworking\/HTTPMethodType"]}],"references":{"doc://JNetworking/documentation/JNetworking/JNWebserviceHelper":{"role":"symbol","title":"JNWebserviceHelper","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JNWebserviceHelper"}],"abstract":[{"type":"text","text":"Helper class to prepare request(adding headers & clubbing base URL) & perform API request."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebserviceHelper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JNWebserviceHelper"}],"url":"\/documentation\/jnetworking\/jnwebservicehelper"},"doc://JNetworking/documentation/JNetworking/JNWebserviceConfig":{"role":"symbol","title":"JNWebserviceConfig","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JNWebserviceConfig"}],"abstract":[{"type":"text","text":"Responsible for generating common headers for requests."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebserviceConfig","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JNWebserviceConfig"}],"url":"\/documentation\/jnetworking\/jnwebserviceconfig"},"doc://JNetworking/documentation/JNetworking/HTTPMethodType":{"role":"symbol","title":"HTTPMethodType","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPMethodType"}],"abstract":[{"type":"text","text":"Supported HTTP methods are declared"}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/HTTPMethodType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPMethodType"}],"url":"\/documentation\/jnetworking\/httpmethodtype"},"doc://JNetworking/documentation/JNetworking/JNJSONResponseDecoder":{"role":"symbol","title":"JNJSONResponseDecoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JNJSONResponseDecoder"}],"abstract":[],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/JNJSONResponseDecoder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JNJSONResponseDecoder"}],"url":"\/documentation\/jnetworking\/jnjsonresponsedecoder"},"doc://JNetworking/documentation/JNetworking/JNWebServiceCompletionBlock":{"role":"symbol","title":"JNWebServiceCompletionBlock","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"JNWebServiceCompletionBlock"}],"abstract":[{"type":"text","text":"The completion hablder"}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/JNWebServiceCompletionBlock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JNWebServiceCompletionBlock"}],"url":"\/documentation\/jnetworking\/jnwebservicecompletionblock"},"doc://JNetworking/documentation/JNetworking":{"role":"collection","title":"JNetworking","abstract":[{"type":"text","text":"This library provee all the necessary logic to make a request to any API from your application."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking","kind":"symbol","type":"topic","url":"\/documentation\/jnetworking"},"doc://JNetworking/documentation/JNetworking/APIRequestModel":{"role":"symbol","title":"APIRequestModel","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIRequestModel"}],"abstract":[{"type":"text","text":"Request Model that holds every api calls parameters, headers and other api details."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/APIRequestModel","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"APIRequestModel"}],"url":"\/documentation\/jnetworking\/apirequestmodel"},"doc://JNetworking/documentation/JNetworking/APIProtocol":{"role":"symbol","title":"APIProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIProtocol"}],"abstract":[{"type":"text","text":"Protocol to which every API should confirm to."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/APIProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"APIProtocol"}],"url":"\/documentation\/jnetworking\/apiprotocol"},"doc://JNetworking/documentation/JNetworking/APIModelType":{"role":"symbol","title":"APIModelType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIModelType"}],"abstract":[{"type":"text","text":"Request Model type that the APIRequestModel confirms to."}],"identifier":"doc:\/\/JNetworking\/documentation\/JNetworking\/APIModelType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"APIModelType"}],"url":"\/documentation\/jnetworking\/apimodeltype"}}}